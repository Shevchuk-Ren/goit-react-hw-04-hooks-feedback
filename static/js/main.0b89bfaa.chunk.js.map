{"version":3,"sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Feedback/Feedback.styled.jsx","components/Feedback/Feedback.jsx","components/Statistics/Statistics.styled.jsx","components/Statistics/Statistics.jsx","components/App/App.styled.jsx","components/App/App.js","index.js"],"names":["SectionWrapper","styled","section","Name","h2","Section","title","children","Button","button","FeedBack","options","onLeavFeedback","className","map","option","type","onClick","Point","p","Decoration","span","Notification","Statistics","good","neutral","bad","total","positivePercentage","answer","Container","div","App","useState","setGood","setNeutral","setBad","precentage","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAEaA,EAAiBC,IAAOC,QAAV,oLASdC,EAAOF,IAAOG,GAAV,+D,OCGFC,EAVC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,eAACP,EAAD,WACGM,GAAS,cAACH,EAAD,UAAOG,IAChBC,MCLQC,EAASP,IAAOQ,OAAV,8MCiBJC,EAfE,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,eAAZ,OACf,qBAAKC,UAAU,eAAf,SACGF,EAAQG,KAAI,SAAAC,GAAM,OACjB,cAACP,EAAD,CAAQQ,KAAK,SAAsBC,QAAS,kBAAML,EAAeG,IAAjE,SACGA,GADwBA,SCLpBG,EAAQjB,IAAOkB,EAAV,wFAILC,EAAanB,IAAOoB,KAAV,+DAGVC,EAAerB,IAAOkB,EAAV,qFCmCVI,EAxCI,SAAC,GAAD,IACjBC,EADiB,EACjBA,KACAC,EAFiB,EAEjBA,QACAC,EAHiB,EAGjBA,IACAC,EAJiB,EAIjBA,MACAC,EALiB,EAKjBA,mBACAC,EANiB,EAMjBA,OANiB,OAQjB,qBAAKhB,UAAU,kBAAf,SACY,IAATW,GAA0B,IAAZC,GAAyB,IAARC,EAC9B,cAACJ,EAAD,UAAeO,IAEf,gCACE,eAACX,EAAD,oBACQ,cAACE,EAAD,UAAaI,OAErB,eAACN,EAAD,uBACW,cAACE,EAAD,UAAaK,OAExB,eAACP,EAAD,mBACO,cAACE,EAAD,UAAaM,IAAkB,OAEtC,eAACR,EAAD,qBACS,cAACE,EAAD,UAAaO,IAAoB,OAE1C,eAACT,EAAD,iCACqB,eAACE,EAAD,WAAaQ,IAAb,gBC5BhBE,EAAY7B,IAAO8B,IAAV,kDCIP,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOT,EAAP,KAAaU,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOR,EAAP,KAAgBU,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOP,EAAP,KAAYU,EAAZ,KAiCA,OACE,eAACN,EAAD,WACE,cAAC,EAAD,CAASxB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEK,QAAS,CAAC,OAAQ,UAAW,OAC7BC,eA9Bc,SAAAG,GACpB,OAAQA,GACN,IAAK,OACHmB,EAAQV,EAAO,GACf,MACF,IAAK,MACHY,EAAOV,EAAM,GACb,MACF,IAAK,UACHS,EAAWV,EAAU,GACrB,MACF,QACE,aAsBF,cAAC,EAAD,CAASnB,MAAM,aAAf,SACE,cAAC,EAAD,CACEkB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAvBQD,EAAMD,EAAUD,EAwBxBI,mBArBgC,WACtC,IAAMD,EAAQD,EAAMD,EAAUD,EACxBa,EAAaV,EAAgB,IAAPH,EAAcG,EAAQ,EAClD,OAAOW,KAAKC,MAAMF,IAmBZR,OAAO,2BCrDjBW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACV,EAAD,MAEFW,SAASC,eAAe,W","file":"static/js/main.0b89bfaa.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const SectionWrapper = styled.section`\n  width: 300px;\n  padding: 10px;\n  text-align: center;\n  background-color: rgba(220, 194, 127, 0.347);\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Name = styled.h2`\n  color: rgba(64, 64, 53, 0.823);\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SectionWrapper, Name } from './Section.styled';\n\nconst Section = ({ title, children }) => (\n  <SectionWrapper>\n    {title && <Name>{title}</Name>}\n    {children}\n  </SectionWrapper>\n);\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\nexport default Section;\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  padding: 10px;\n  margin-left: 5px;\n  width: 80px;\n  color: cornsilk;\n  background-color: rgba(49, 29, 29, 0.571);\n  :first-letter {\n    text-transform: capitalize;\n  }\n`;\n","import React from 'react';\nimport { Button } from './Feedback.styled';\nimport PropTypes from 'prop-types';\n\nconst FeedBack = ({ options, onLeavFeedback }) => (\n  <div className=\"buttons__set\">\n    {options.map(option => (\n      <Button type=\"button\" key={option} onClick={() => onLeavFeedback(option)}>\n        {option}\n      </Button>\n    ))}\n  </div>\n);\n\nFeedBack.propTypes = {\n  onLeavFeedback: PropTypes.func.isRequired,\n  options: PropTypes.array.isRequired,\n};\n\nexport default FeedBack;\n","import styled from '@emotion/styled';\n\nexport const Point = styled.p`\n  color: rgba(248, 240, 240, 0.857);\n  font-weight: bold;\n`;\nexport const Decoration = styled.span`\n  color: rgba(49, 29, 29, 0.571);\n`;\nexport const Notification = styled.p`\n  color: rgba(49, 29, 29, 0.714);\n  font-weight: bold;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Decoration, Point, Notification } from './Statistics.styled';\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n  answer,\n}) => (\n  <div className=\"statistics__set\">\n    {good === 0 && neutral === 0 && bad === 0 ? (\n      <Notification>{answer}</Notification>\n    ) : (\n      <div>\n        <Point>\n          Good: <Decoration>{good}</Decoration>\n        </Point>\n        <Point>\n          Neutral: <Decoration>{neutral}</Decoration>\n        </Point>\n        <Point>\n          Bad: <Decoration>{bad}</Decoration>{' '}\n        </Point>\n        <Point>\n          Total: <Decoration>{total}</Decoration>{' '}\n        </Point>\n        <Point>\n          Positive feedback: <Decoration>{positivePercentage()}%</Decoration>\n        </Point>\n      </div>\n    )}\n  </div>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.func.isRequired,\n};\nexport default Statistics;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  padding: 20px 5px;\n`;\n","import { useState } from 'react';\nimport Section from '../Section';\nimport FeedBack from '../Feedback';\nimport Statistics from '../Statistics';\nimport { Container } from './App.styled';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  // static defaultProps = {\n  //   good: 0,\n  //   neutral: 0,\n  //   bad: 0,\n  // };\n\n  const leaveFeedback = option => {\n    switch (option) {\n      case 'good':\n        setGood(good + 1);\n        break;\n      case 'bad':\n        setBad(bad + 1);\n        break;\n      case 'neutral':\n        setNeutral(neutral + 1);\n        break;\n      default:\n        return;\n    }\n  };\n  const countTotalFeedback = () => {\n    const total = bad + neutral + good;\n    return total;\n  };\n  const countPositiveFeedbackPercentage = () => {\n    const total = bad + neutral + good;\n    const precentage = total ? (good * 100) / total : 0;\n    return Math.round(precentage);\n  };\n\n  return (\n    <Container>\n      <Section title=\"Please leave feedback\">\n        <FeedBack\n          options={['good', 'neutral', 'bad']}\n          onLeavFeedback={leaveFeedback}\n        />\n      </Section>\n\n      <Section title=\"Statistics\">\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback()}\n          positivePercentage={countPositiveFeedbackPercentage}\n          answer=\"No feedback given\"\n        />\n      </Section>\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}